type SeacowsPositionManager @entity {
  id: ID!

  # pool info
  poolCount: BigInt!
}

type Position @entity {
  id: ID!
  owner: User!
  slot: BigInt!
  pool: Pool
  liquidity: BigInt!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!

  txCount: BigInt!
}

type NFT @entity {
  # Pair Address + "-" + Token ID
  id: ID!
  tokenId: BigInt!
  collection: Collection!
  tokenURI: String!
  pool: Pool
}

type Collection @entity {
  id: ID!

  symbol: String!
  name: String!

  txCount: BigInt!
}

type Slot @entity {
  # slot
  id: ID!
  slot: BigInt!
  pool: Pool!
}

type Pool @entity {
  id: ID!
  token: Token!
  collection: Collection!
  fee: BigInt
  slot: BigInt

  txCount: BigInt!
  liquidity: BigInt!

  nfts: [NFT!]! @derivedFrom(field: "pool")
  positions: [Position!]! @derivedFrom(field: "pool")

  mints: [Mint!]! @derivedFrom(field: "pool")
  burns: [Burn!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")

  # daily snapshots of pool data
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
  # weekly snapshots of pool data
  poolWeekData: [PoolWeekData!]! @derivedFrom(field: "pool")

  price: BigDecimal!
  priceAt: BigInt!
  lastPrice: BigDecimal!
  lastPriceAt: BigInt!
  lastDayPrice: BigDecimal!
  lastDayPriceAt: BigInt!
  lastWeekPrice: BigDecimal!
  lastWeekPriceAt: BigInt!
}

type User @entity {
  id: ID!
  positions: [Position!] @derivedFrom(field: "owner")
}

type Transaction @entity {
  # txn hash
  id: ID!
  timestamp: BigInt!
  # block txn was included in
  blockNumber: BigInt!

  mints: [Mint]! @derivedFrom(field: "transaction")
  burns: [Burn]! @derivedFrom(field: "transaction")
  swaps: [Swap]! @derivedFrom(field: "transaction")
}

type Mint @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  pool: Pool!
  transaction: Transaction!
  timestamp: BigInt!

  token: Token!
  collection: Collection!

  sender: Bytes!

  tokenAmount: BigDecimal!
  nftAmount: BigInt!
}

type Burn @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  pool: Pool!
  transaction: Transaction!
  timestamp: BigInt!

  token: Token!
  collection: Collection!

  sender: Bytes!

  tokenAmount: BigDecimal!
  nftAmount: BigInt!
}

type Swap @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  pool: Pool!

  transaction: Transaction!
  timestamp: BigInt!

  token: Token!
  collection: Collection!

  sender: Bytes!

  tokenAmount: BigDecimal!
  nftAmount: BigInt!
}

# Data accumulated and condensed into day stats for each pool
type PoolDayData @entity {
  id: ID!
  date: Int!

  pool: Pool!

  volume: BigDecimal!
  price: BigDecimal!
  priceChange: BigDecimal!
}

# Data accumulated and condensed into week stats for each pool
type PoolWeekData @entity {
  id: ID!
  week: Int!

  pool: Pool!

  volume: BigDecimal!
  price: BigDecimal!
  priceChange: BigDecimal!
}
